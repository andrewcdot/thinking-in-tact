;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: MyMsgBody
;; TLB: _ x:int257 y:^string = MyMsgBody
;;

builder $MyMsgBody$_store(builder build_0, (int, slice) v) inline {
    var (v'x, v'y) = v;
    build_0 = build_0.store_int(v'x, 257);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'y).end_cell());
    return build_0;
}

cell $MyMsgBody$_store_cell((int, slice) v) inline {
    return $MyMsgBody$_store(begin_cell(), v).end_cell();
}

((int, slice)) $MyMsgBody$_constructor_x_y(int x, slice y) inline {
    return (x, y);
}

;;
;; Type: SendMsgContract
;;

tuple $SendMsgContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SendMsgContract$_contract_init();
    }
}

() $SendMsgContract$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}