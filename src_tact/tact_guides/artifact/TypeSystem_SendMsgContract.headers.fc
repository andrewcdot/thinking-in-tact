;;
;; Header files for SendMsgContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $MyMsgBody$_store
builder $MyMsgBody$_store(builder build_0, (int, slice) v) inline;

;; $MyMsgBody$_store_cell
cell $MyMsgBody$_store_cell((int, slice) v) inline;

;; $BinMsg$_load
(slice, ((int, slice))) $BinMsg$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $HelloWorld$init$_store
builder $HelloWorld$init$_store(builder build_0, tuple v) inline;

;; $SendMsgContract$_contract_init
tuple $SendMsgContract$_contract_init() impure inline_ref;

;; $SendMsgContract$_contract_load
tuple $SendMsgContract$_contract_load() impure inline_ref;

;; $SendMsgContract$_contract_store
() $SendMsgContract$_contract_store(tuple v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $HelloWorld$_init_child
(cell, cell) $HelloWorld$_init_child(cell sys') inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $SendMsgContract$_fun_counter
(tuple, int) $SendMsgContract$_fun_counter(tuple $self) impure inline_ref;

;; $SendMsgContract$_fun_forward
(tuple, ()) $SendMsgContract$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $SendMsgContract$_fun_reply
(tuple, ()) $SendMsgContract$_fun_reply(tuple $self, cell $body) impure inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline;

;; $MyMsgBody$_constructor_x_y
((int, slice)) $MyMsgBody$_constructor_x_y(int x, slice y) inline;

;; $SendParameters$_constructor_bounce_to_value_mode_code_data_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_code_data_body(int bounce, slice to, int value, int mode, cell code, cell data, cell body) inline;
